{"version":3,"sources":["chartist-plugin-threshold.js"],"names":["root","factory","define","amd","returnExportsGlobal","exports","module","this","window","document","Chartist","createMasks","chart","thresholdSeries","options","defs","svg","querySelector","elem","width","height","aboveMask","x","y","id","maskNames","aboveThreshold","belowMask","belowThreshold","data","length","interpolator","lineSmooth","thresholdSvgPath","createThresholdSvgPath","firstElement","pathElements","lastElement","aboveMaskSvgPath","clone","position","remove","move","line","belowMaskSvgPath","d","stringify","fill","thresholdData","pathCoordinates","pathData","forEach","value","valueIndex","p","chartRect","x1","axisX","projectValue","y1","axisY","push","meta","normalizeThresholdData","threshold","isNum","series","count","reduce","prev","curr","Math","max","times","map","name","constructor","Array","Object","Error","normalizedData","normalizeData","getDataArray","reverseData","shift","defaultOptions","classNames","Interpolation","none","fillHoles","plugins","ctThreshold","extend","Line","Bar","on","type","thresholdPoint","index","thresholdValue","element","addClass","parent","_node","cloneNode","attr","mask"],"mappings":"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","file":"chartist-plugin-threshold.min.js","sourcesContent":["(function (root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define([], function () {\n      return (root.returnExportsGlobal = factory());\n    });\n  } else if (typeof exports === 'object') {\n    // Node. Does not work with strict CommonJS, but\n    // only CommonJS-like enviroments that support module.exports,\n    // like Node.\n    module.exports = factory();\n  } else {\n    root['Chartist.plugins.ctThreshold'] = factory();\n  }\n}(this, function () {\n\n  /**\n   * Chartist.js plugin to display a data label on top of the points in a line chart.\n   *\n   */\n  /* global Chartist */\n  (function (window, document, Chartist) {\n    'use strict';\n\n    var defaultOptions = {\n      threshold: 0,\n      classNames: {\n        aboveThreshold: 'ct-threshold-above',\n        belowThreshold: 'ct-threshold-below'\n      },\n      maskNames: {\n        aboveThreshold: 'ct-threshold-mask-above',\n        belowThreshold: 'ct-threshold-mask-below'\n      },\n      lineSmooth: Chartist.Interpolation.none({\n        fillHoles: true\n      })\n    };\n\n    function createMasks(chart, thresholdSeries, options) {\n      // Select the defs element within the chart or create a new one\n      var defs = chart.svg.querySelector('defs') || chart.svg.elem('defs');\n      var width = chart.svg.width();\n      var height = chart.svg.height();\n\n      // Create mask for upper part above threshold\n      var aboveMask = defs\n        .elem('mask', {\n          x: 0,\n          y: 0,\n          width: width,\n          height: height,\n          id: options.maskNames.aboveThreshold\n        });\n\n      // Create mask for lower part below threshold\n      var belowMask = defs\n        .elem('mask', {\n          x: 0,\n          y: 0,\n          width: width,\n          height: height,\n          id: options.maskNames.belowThreshold\n        });\n\n      if (thresholdSeries.data.length) {\n        // generate SVG path for the threshold series and append to each mask\n        var interpolator = options.lineSmooth;\n        var thresholdSvgPath = createThresholdSvgPath(chart, thresholdSeries.data, interpolator);\n        var firstElement = thresholdSvgPath.pathElements[0];\n        var lastElement = thresholdSvgPath.pathElements[thresholdSvgPath.pathElements.length - 1];\n\n        // first element is removed and replaced with a line from top-left of the chart to the first point\n        var aboveMaskSvgPath = thresholdSvgPath.clone(true)\n          .position(0)\n          .remove(1)\n          .move(firstElement.x, 0)\n          .line(firstElement.x, firstElement.y)\n          .position(thresholdSvgPath.pathElements.length + 1)\n          .line(lastElement.x, 0);\n\n        // first element is removed and replaced with a line from bottom-left of the chart to the first point\n        var belowMaskSvgPath = thresholdSvgPath\n          .position(0)\n          .remove(1)\n          .move(firstElement.x, height)\n          .line(firstElement.x, firstElement.y)\n          .position(thresholdSvgPath.pathElements.length + 1)\n          .line(lastElement.x, height);\n\n        aboveMask.elem('path', {\n          d: aboveMaskSvgPath.stringify(),\n          fill: 'white'\n        });\n\n        belowMask.elem('path', {\n          d: belowMaskSvgPath.stringify(),\n          fill: 'white'\n        });\n      }\n\n      return defs;\n    }\n\n    // generates an SVG Path for the given threshold data and returns an instance of Chartist.Svg.Path\n    function createThresholdSvgPath(chart, thresholdData, interpolator) {\n      var pathCoordinates = [];\n      var pathData = [];\n\n      thresholdData.forEach(function(value, valueIndex) {\n        var p = {\n          x: chart.chartRect.x1 + chart.axisX.projectValue(value, valueIndex, thresholdData),\n          y: chart.chartRect.y1 - chart.axisY.projectValue(value, valueIndex, thresholdData)\n        };\n\n        pathCoordinates.push(p.x, p.y);\n        pathData.push({\n          value: value,\n          valueIndex: valueIndex,\n          meta: ''\n        });\n      });\n\n      return interpolator(pathCoordinates, pathData);\n    }\n\n    // converts threshold parameter to a data series, normalizes data, and returns threshold series\n    function normalizeThresholdData(threshold, chart) {\n      var thresholdSeries;\n\n      if (Chartist.isNum(threshold)) {\n        // if threshold is a static number, generate a series of static data points\n        var data = [];\n\n        if (chart.data.series.length) {\n          var count = chart.data.series.reduce(function(prev, curr) {\n            return Math.max(prev, (curr.data || curr).length);\n          }, 0);\n\n          data = Chartist.times(count).map(function() {\n            return threshold;\n          });\n        }\n\n        thresholdSeries = {\n          data: data,\n          name: '_threshold'\n        };\n      } else {\n        // if threshold is a string, map threshold to series data of matching series\n        if (typeof threshold === 'string') {\n          thresholdSeries = chart.data.series.reduce(function(prev, curr) {\n            return curr.name === threshold ? curr : prev;\n          }, threshold);\n        } else if (threshold.constructor === Array) {\n          thresholdSeries = {\n            data: threshold,\n            name: '_threshold'\n          };\n        }\n\n        // if threshold is not an array or valid series name, throw an exception\n        if (!(thresholdSeries instanceof Object) || !thresholdSeries.data) {\n          throw new Error('Invalid \\'threshold\\' value provided to chartist-plugin-threshold: ' + threshold);\n        }\n      }\n\n      var normalizedData = Chartist.normalizeData({\n        series: [thresholdSeries]\n      });\n\n      thresholdSeries.data = Chartist.getDataArray(normalizedData, chart.options.reverseData, true).shift();\n      return thresholdSeries;\n    }\n\n    Chartist.plugins = Chartist.plugins || {};\n    Chartist.plugins.ctThreshold = function (options) {\n\n      options = Chartist.extend({}, defaultOptions, options);\n\n      return function ctThreshold(chart) {\n        if (chart instanceof Chartist.Line || chart instanceof Chartist.Bar) {\n          var thresholdSeries = normalizeThresholdData(options.threshold, chart);\n\n          chart.on('draw', function (data) {\n            // if the element represents the control series, don't apply threshold classes or masks to it\n            if (data.series && data.series.name && data.series.name === thresholdSeries.name) {\n              return;\n            }\n\n            if (data.type === 'point') {\n              // For points we can just use the data value and compare against the threshold in order to determine\n              // the appropriate class\n\n              // use point at given index in the threshold data as the threshold for the current point\n              var thresholdPoint = thresholdSeries.data[data.index] || {y: 0};\n              var thresholdValue = +thresholdPoint.y || 0;\n\n              data.element.addClass(\n                data.value.y >= thresholdValue ? options.classNames.aboveThreshold : options.classNames.belowThreshold\n              );\n            } else if (data.type === 'line' || data.type === 'bar' || data.type === 'area') {\n              // Cloning the original line path, mask it with the upper mask rect above the threshold and add the\n              // class for above threshold\n              data.element\n                .parent()\n                .elem(data.element._node.cloneNode(true))\n                .attr({\n                  mask: 'url(#' + options.maskNames.aboveThreshold + ')'\n                })\n                .addClass(options.classNames.aboveThreshold);\n\n              // Use the original line path, mask it with the lower mask rect below the threshold and add the class\n              // for blow threshold\n              data.element\n                .attr({\n                  mask: 'url(#' + options.maskNames.belowThreshold + ')'\n                })\n                .addClass(options.classNames.belowThreshold);\n            }\n          });\n\n          // On the created event, create the two mask definitions used to mask the line graphs\n          chart.on('created', function (data) {\n            if (thresholdSeries.data.length) {\n              createMasks(data, thresholdSeries, options);\n            }\n          });\n        }\n      };\n    };\n  }(window, document, Chartist));\n\n  return Chartist.plugins.ctThreshold;\n\n}));\n"]}