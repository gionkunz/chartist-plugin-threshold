{"version":3,"sources":["chartist-plugin-threshold.js"],"names":["root","factory","define","amd","returnExportsGlobal","exports","module","this","window","document","Chartist","createMasks","data","options","defs","svg","querySelector","elem","projectedThreshold","chartRect","height","axisY","projectValue","threshold","y2","width","x","y","id","maskNames","aboveThreshold","fill","belowThreshold","defaultOptions","classNames","basePath","plugins","ctThreshold","extend","chart","Line","Bar","on","type","element","addClass","value","parent","_node","cloneNode","attr","mask"],"mappings":";;;;;;CAAC,SAAUA,EAAMC,GACO,kBAAXC,SAAyBA,OAAOC,IAEzCD,UAAW,WACT,MAAQF,GAAKI,oBAAsBH,MAET,gBAAZI,SAIhBC,OAAOD,QAAUJ,IAEjBD,EAAK,gCAAkCC,KAEzCM,KAAM,WAgHN,MAzGC,UAAUC,EAAQC,EAAUC,GAC3B,YAeA,SAASC,GAAYC,EAAMC,GAEzB,GAAIC,GAAOF,EAAKG,IAAIC,cAAc,SAAWJ,EAAKG,IAAIE,KAAK,QAEvDC,EAAqBN,EAAKO,UAAUC,SAAWR,EAAKS,MAAMC,aAAaT,EAAQU,WAAaX,EAAKO,UAAUK,GAC3GC,EAAQb,EAAKG,IAAIU,QACjBL,EAASR,EAAKG,IAAIK,QAoCtB,OAjCAN,GACGG,KAAK,QACJS,EAAG,EACHC,EAAG,EACHF,MAAOA,EACPL,OAAQA,EACRQ,GAAIf,EAAQgB,UAAUC,iBAEvBb,KAAK,QACJS,EAAG,EACHC,EAAG,EACHF,MAAOA,EACPL,OAAQF,EACRa,KAAM,UAIVjB,EACGG,KAAK,QACJS,EAAG,EACHC,EAAG,EACHF,MAAOA,EACPL,OAAQA,EACRQ,GAAIf,EAAQgB,UAAUG,iBAEvBf,KAAK,QACJS,EAAG,EACHC,EAAGT,EACHO,MAAOA,EACPL,OAAQA,EAASF,EACjBa,KAAM,UAGHjB,EAvDT,GAAImB,IACFV,UAAW,EACXW,YACEJ,eAAgB,qBAChBE,eAAgB,sBAElBH,WACEC,eAAgB,0BAChBE,eAAgB,2BAElBG,SAAU,GAgDZzB,GAAS0B,QAAU1B,EAAS0B,YAC5B1B,EAAS0B,QAAQC,YAAc,SAAUxB,GAIvC,MAFAA,GAAUH,EAAS4B,UAAWL,EAAgBpB,GAEvC,SAAqB0B,IACtBA,YAAiB7B,GAAS8B,MAAQD,YAAiB7B,GAAS+B,OAC9DF,EAAMG,GAAG,OAAQ,SAAU9B,GACP,UAAdA,EAAK+B,KAGP/B,EAAKgC,QAAQC,SACXjC,EAAKkC,MAAMnB,GAAKd,EAAQU,UAAYV,EAAQqB,WAAWJ,eAAiBjB,EAAQqB,WAAWF,gBAEtE,SAAdpB,EAAK+B,MAAiC,QAAd/B,EAAK+B,MAAgC,SAAd/B,EAAK+B,OAG7D/B,EAAKgC,QACFG,SACA9B,KAAKL,EAAKgC,QAAQI,MAAMC,WAAU,IAClCC,MACCC,KAAM,OAAStC,EAAQsB,SAAW,IAAMtB,EAAQgB,UAAUC,eAAiB,MAE5Ee,SAAShC,EAAQqB,WAAWJ,gBAI/BlB,EAAKgC,QACFM,MACCC,KAAM,OAAStC,EAAQsB,SAAW,IAAMtB,EAAQgB,UAAUG,eAAiB,MAE5Ea,SAAShC,EAAQqB,WAAWF,mBAKnCO,EAAMG,GAAG,UAAW,SAAU9B,GAC5BD,EAAYC,EAAMC,SAK1BL,OAAQC,SAAUC,UAEbA,SAAS0B,QAAQC","file":"chartist-plugin-threshold.min.js","sourcesContent":["(function (root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define([], function () {\n      return (root.returnExportsGlobal = factory());\n    });\n  } else if (typeof exports === 'object') {\n    // Node. Does not work with strict CommonJS, but\n    // only CommonJS-like enviroments that support module.exports,\n    // like Node.\n    module.exports = factory();\n  } else {\n    root['Chartist.plugins.ctThreshold'] = factory();\n  }\n}(this, function () {\n\n  /**\n   * Chartist.js plugin to display a data label on top of the points in a line chart.\n   *\n   */\n  /* global Chartist */\n  (function (window, document, Chartist) {\n    'use strict';\n\n    var defaultOptions = {\n      threshold: 0,\n      classNames: {\n        aboveThreshold: 'ct-threshold-above',\n        belowThreshold: 'ct-threshold-below'\n      },\n      maskNames: {\n        aboveThreshold: 'ct-threshold-mask-above',\n        belowThreshold: 'ct-threshold-mask-below'\n      },\n      basePath: ''\n    };\n\n    function createMasks(data, options) {\n      // Select the defs element within the chart or create a new one\n      var defs = data.svg.querySelector('defs') || data.svg.elem('defs');\n      // Project the threshold value on the chart Y axis\n      var projectedThreshold = data.chartRect.height() - data.axisY.projectValue(options.threshold) + data.chartRect.y2;\n      var width = data.svg.width();\n      var height = data.svg.height();\n\n      // Create mask for upper part above threshold\n      defs\n        .elem('mask', {\n          x: 0,\n          y: 0,\n          width: width,\n          height: height,\n          id: options.maskNames.aboveThreshold\n        })\n        .elem('rect', {\n          x: 0,\n          y: 0,\n          width: width,\n          height: projectedThreshold,\n          fill: 'white'\n        });\n\n      // Create mask for lower part below threshold\n      defs\n        .elem('mask', {\n          x: 0,\n          y: 0,\n          width: width,\n          height: height,\n          id: options.maskNames.belowThreshold\n        })\n        .elem('rect', {\n          x: 0,\n          y: projectedThreshold,\n          width: width,\n          height: height - projectedThreshold,\n          fill: 'white'\n        });\n\n      return defs;\n    }\n\n    Chartist.plugins = Chartist.plugins || {};\n    Chartist.plugins.ctThreshold = function (options) {\n\n      options = Chartist.extend({}, defaultOptions, options);\n\n      return function ctThreshold(chart) {\n        if (chart instanceof Chartist.Line || chart instanceof Chartist.Bar) {\n          chart.on('draw', function (data) {\n            if (data.type === 'point') {\n              // For points we can just use the data value and compare against the threshold in order to determine\n              // the appropriate class\n              data.element.addClass(\n                data.value.y >= options.threshold ? options.classNames.aboveThreshold : options.classNames.belowThreshold\n              );\n            } else if (data.type === 'line' || data.type === 'bar' || data.type === 'area') {\n              // Cloning the original line path, mask it with the upper mask rect above the threshold and add the\n              // class for above threshold\n              data.element\n                .parent()\n                .elem(data.element._node.cloneNode(true))\n                .attr({\n                  mask: 'url(' + options.basePath + '#' + options.maskNames.aboveThreshold + ')'\n                })\n                .addClass(options.classNames.aboveThreshold);\n\n              // Use the original line path, mask it with the lower mask rect below the threshold and add the class\n              // for blow threshold\n              data.element\n                .attr({\n                  mask: 'url(' + options.basePath + '#' + options.maskNames.belowThreshold + ')'\n                })\n                .addClass(options.classNames.belowThreshold);\n            }\n          });\n\n          // On the created event, create the two mask definitions used to mask the line graphs\n          chart.on('created', function (data) {\n            createMasks(data, options);\n          });\n        }\n      };\n    }\n  }(window, document, Chartist));\n\n  return Chartist.plugins.ctThreshold;\n\n}));\n"]}