{"version":3,"sources":["chartist-plugin-threshold.js"],"names":["root","factory","define","amd","returnExportsGlobal","exports","module","this","window","document","Chartist","createMasks","data","thresholdSeries","options","defs","svg","querySelector","elem","width","height","aboveMask","x","y","id","maskNames","aboveThreshold","belowMask","belowThreshold","length","interpolator","Interpolation","none","fillHoles","thresholdSvgPath","createThresholdSvgPath","firstElement","pathElements","lastElement","aboveMaskSvgPath","clone","position","remove","move","line","belowMaskSvgPath","d","stringify","fill","chart","thresholdData","pathCoordinates","pathData","normalizedData","normalizeData","series","getDataArray","reverseData","shift","forEach","value","valueIndex","p","chartRect","x1","axisX","projectValue","y1","axisY","push","meta","normalizeThresholdData","threshold","isNum","times","labels","map","name","reduce","prev","curr","constructor","Array","Object","Error","defaultOptions","classNames","plugins","ctThreshold","extend","Line","Bar","on","type","thresholdValue","Number","index","element","addClass","parent","_node","cloneNode","attr","mask"],"mappings":"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","file":"chartist-plugin-threshold.min.js","sourcesContent":["(function (root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define([], function () {\n      return (root.returnExportsGlobal = factory());\n    });\n  } else if (typeof exports === 'object') {\n    // Node. Does not work with strict CommonJS, but\n    // only CommonJS-like enviroments that support module.exports,\n    // like Node.\n    module.exports = factory();\n  } else {\n    root['Chartist.plugins.ctThreshold'] = factory();\n  }\n}(this, function () {\n\n  /**\n   * Chartist.js plugin to display a data label on top of the points in a line chart.\n   *\n   */\n  /* global Chartist */\n  (function (window, document, Chartist) {\n    'use strict';\n\n    var defaultOptions = {\n      threshold: 0,\n      classNames: {\n        aboveThreshold: 'ct-threshold-above',\n        belowThreshold: 'ct-threshold-below'\n      },\n      maskNames: {\n        aboveThreshold: 'ct-threshold-mask-above',\n        belowThreshold: 'ct-threshold-mask-below'\n      }\n    };\n\n    function createMasks(data, thresholdSeries, options) {\n      // Select the defs element within the chart or create a new one\n      var defs = data.svg.querySelector('defs') || data.svg.elem('defs');\n      var width = data.svg.width();\n      var height = data.svg.height();\n\n      // Create mask for upper part above threshold\n      var aboveMask = defs\n        .elem('mask', {\n          x: 0,\n          y: 0,\n          width: width,\n          height: height,\n          id: options.maskNames.aboveThreshold\n        });\n\n      // Create mask for lower part below threshold\n      var belowMask = defs\n        .elem('mask', {\n          x: 0,\n          y: 0,\n          width: width,\n          height: height,\n          id: options.maskNames.belowThreshold\n        });\n\n      if (thresholdSeries.data.length) {\n        // TODO add thresholdSmooth option to plugin and use here\n        var interpolator = Chartist.Interpolation.none({\n          fillHoles: true\n        });\n\n        var thresholdSvgPath = createThresholdSvgPath(data, thresholdSeries.data, interpolator);\n        var firstElement = thresholdSvgPath.pathElements[0];\n        var lastElement = thresholdSvgPath.pathElements[thresholdSvgPath.pathElements.length - 1];\n\n        var aboveMaskSvgPath = thresholdSvgPath.clone(true)\n          .position(0)\n          .remove(1)\n          .move(firstElement.x, 0)\n          .line(firstElement.x, firstElement.y)\n          .position(thresholdSvgPath.pathElements.length + 1)\n          .line(lastElement.x, 0);\n\n        var belowMaskSvgPath = thresholdSvgPath\n          .position(0)\n          .remove(1)\n          .move(firstElement.x, height)\n          .line(firstElement.x, firstElement.y)\n          .position(thresholdSvgPath.pathElements.length + 1)\n          .line(lastElement.x, height);\n\n        aboveMask.elem('path', {\n          d: aboveMaskSvgPath.stringify(),\n          fill: 'white'\n        });\n\n        belowMask.elem('path', {\n          d: belowMaskSvgPath.stringify(),\n          fill: 'white'\n        });\n      }\n\n      return defs;\n    }\n\n    function createThresholdSvgPath(chart, thresholdData, interpolator) {\n      var pathCoordinates = [];\n      var pathData = [];\n\n      var normalizedData = Chartist.normalizeData({\n        series: [thresholdData]\n      });\n\n      thresholdData = Chartist.getDataArray(normalizedData, chart.options.reverseData, true).shift();\n\n      thresholdData.forEach(function(value, valueIndex) {\n        var p = {\n          x: chart.chartRect.x1 + chart.axisX.projectValue(value, valueIndex, thresholdData),\n          y: chart.chartRect.y1 - chart.axisY.projectValue(value, valueIndex, thresholdData)\n        };\n\n        pathCoordinates.push(p.x, p.y);\n        pathData.push({\n          value: value,\n          valueIndex: valueIndex,\n          meta: ''\n        });\n      });\n\n      return interpolator(pathCoordinates, pathData);\n    }\n\n    function normalizeThresholdData(threshold, chart) {\n      var thresholdSeries;\n\n      if (Chartist.isNum(threshold)) {\n        var data = Chartist.times(chart.data.labels.length).map(function() {\n          return threshold;\n        });\n\n        thresholdSeries = {\n          data: data,\n          name: '_threshold'\n        };\n      } else {\n        // if threshold is a string, map threshold to series data of matching series\n        if (typeof threshold === 'string') {\n          thresholdSeries = chart.data.series.reduce(function(prev, curr) {\n            return curr.name === threshold ? curr : prev;\n          }, threshold);\n        } else if (threshold.constructor === Array) {\n          thresholdSeries = {\n            data: threshold,\n            name: '_threshold'\n          };\n        }\n\n        // if threshold is not an array or valid series name, throw an exception\n        if (!(thresholdSeries instanceof Object) || !thresholdSeries.data) {\n          throw new Error('Invalid \\'threshold\\' value provided to chartist-plugin-threshold: ' + threshold);\n        }\n      }\n\n      return thresholdSeries;\n    }\n\n    Chartist.plugins = Chartist.plugins || {};\n    Chartist.plugins.ctThreshold = function (options) {\n\n      options = Chartist.extend({}, defaultOptions, options);\n\n      return function ctThreshold(chart) {\n        if (chart instanceof Chartist.Line || chart instanceof Chartist.Bar) {\n          var thresholdSeries = normalizeThresholdData(options.threshold, chart);\n\n          chart.on('draw', function (data) {\n            // if the element represents the control series, don't apply threshold classes or masks to it\n            if (data.series && data.series.name === thresholdSeries.name) {\n              return;\n            }\n\n            if (data.type === 'point') {\n              // For points we can just use the data value and compare against the threshold in order to determine\n              // the appropriate class\n\n              // use value of array at given index as the threshold for the current point\n              var thresholdValue = Number(thresholdSeries.data[data.index] || 0);\n\n              data.element.addClass(\n                data.value.y >= thresholdValue ? options.classNames.aboveThreshold : options.classNames.belowThreshold\n              );\n            } else if (data.type === 'line' || data.type === 'bar' || data.type === 'area') {\n              // Cloning the original line path, mask it with the upper mask rect above the threshold and add the\n              // class for above threshold\n              data.element\n                .parent()\n                .elem(data.element._node.cloneNode(true))\n                .attr({\n                  mask: 'url(#' + options.maskNames.aboveThreshold + ')'\n                })\n                .addClass(options.classNames.aboveThreshold);\n\n              // Use the original line path, mask it with the lower mask rect below the threshold and add the class\n              // for blow threshold\n              data.element\n                .attr({\n                  mask: 'url(#' + options.maskNames.belowThreshold + ')'\n                })\n                .addClass(options.classNames.belowThreshold);\n            }\n          });\n\n          // On the created event, create the two mask definitions used to mask the line graphs\n          chart.on('created', function (data) {\n            if (thresholdSeries.data.length) {\n              createMasks(data, thresholdSeries, options);\n            }\n          });\n        }\n      };\n    };\n  }(window, document, Chartist));\n\n  return Chartist.plugins.ctThreshold;\n\n}));\n"]}